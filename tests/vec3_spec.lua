assert = require("luassert")

describe("Vec3", function()
    local Vec3 = require("colorful.vec3")

    it("should index with x-y-z, r-g-b, h-s-l", function()
        local vec = Vec3:new(1, 2, 3)
        assert.equals(vec.x, 1)
        assert.equals(vec.y, 2)
        assert.equals(vec.z, 3)
        assert.equals(vec.r, 1)
        assert.equals(vec.g, 2)
        assert.equals(vec.b, 3)
        assert.equals(vec.h, 1)
        assert.equals(vec.s, 2)
        assert.equals(vec.l, 3)
    end)

    it("should be equal to a new vector with the same components", function()
        local v1 = Vec3:new(-1, 3.14159, 3000)
        local v2 = Vec3:new(-1, 3.14159, 3000)
        assert.is_true(v1 == v2)
    end)

    it("should negate with unary minus operator", function()
        local vec = Vec3:new(-1, 3.14159, 3000)
        assert.equals(-vec, Vec3:new(1, -3.14159, -3000))
    end)

    it("should add two vectors", function()
        local v1 = Vec3:new(1, 2, 3)
        local v2 = Vec3:new(-1, -2, -1000)
        assert.equals(v1 + v2, Vec3:new(0, 0, -997))
    end)

    it("should subtract two vectors", function()
        local v1 = Vec3:new(0, 0, 3)
        local v2 = Vec3:new(-1, -2, -1000)
        assert.equals(v1 - v2, Vec3:new(1, 2, 1003))
    end)

    it("should be multiplied by a scalar", function()
        local vec = Vec3:new(50, 25, -10)
        assert.equals(vec * 2, Vec3:new(100, 50, -20))
    end)

    it("should be divided by a scalar", function()
        local vec = Vec3:new(1001, 2005, 42)
        assert.equals(vec / 10, Vec3:new(100.1, 200.5, 4.2))
    end)

    it("should have tostring return `[x, y, z]` without trailing zeroes", function()
        local vec = Vec3:new(0, 1.000002, -42)
        assert.equals(tostring(vec), "[0, 1.000002, -42]")
    end)
end)
